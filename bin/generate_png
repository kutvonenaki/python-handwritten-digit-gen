#!/usr/bin/env python

import argparse
from digitgenerator import Digitgenerator
import numpy as np


if __name__ == "__main__":

    #set up parser for command line commands
    parser = argparse.ArgumentParser(description='Produce an output image ')
    
    #required exclusive options:
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--digits', type=int, nargs='+',
                    help='Digits to be generated, separated by a space')
    
    group.add_argument("--random", type=int,default=0,
                        help="Number of digits in a random sample which is being genrated and saved as image_out.png")
    
    
    parser.add_argument("--spacing", default=[4,4], type=int,nargs=2,
                        help="2 integers decribing the lower and upper bound (in pixels) of spacing between the images")
                        
    parser.add_argument("--width", type=int,
                        help="The total image width. At the moment disabled feature")

    parser.add_argument("--cvae", default=0, type=int,
                        help="0 for sampling from MNIST data, 1 for using the conditional variational autoencoder")

    parser.add_argument("--outfile", default="./image_out.png",
                        help="Name of the outputfile. Default is image_out.png")
                        
    args = parser.parse_args()
        
    if ((args.digits == None) and (args.random == None)):
        parser.error("at least one of --digits or --random required")
    
    #initialize digitgenerator
    digitgen=Digitgenerator()  

	if args.cvae:
		drawmethod=digitgen.sample_from_vae
	else:
		drawmethod=digitgen.draw_from_mnist
      
    #draw either random sample or sample defined by digits
    if args.digits:
        drawmethod(args.digits,tuple(args.spacing),args.width)
    
    else:
        randomdigitlist = np.random.randint(10, size=args.random)
        drawmethod(randomdigitlist,tuple(args.spacing),args.width)
        
 
    #save input
    digitgen.save_latest_as_png(filename=args.outfile)
    
    print('output file saved as '+str(args.outfile))
